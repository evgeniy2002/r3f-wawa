/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/chair.gltf --ts 
*/

import React from 'react';
import { useGLTF, useTexture } from '@react-three/drei';
import { Object3D } from 'three';
import * as THREE from 'three';
import { useConfig } from '../context';

interface GLTFResult {
  nodes: {
    Chair: Object3D & { geometry: THREE.BufferGeometry };
    Cushion: Object3D & { geometry: THREE.BufferGeometry };
    Legs1: Object3D & { geometry: THREE.BufferGeometry };
    Legs2: Object3D & { geometry: THREE.BufferGeometry };
  };
  materials: { [key: string]: THREE.Material };
}

export const Chair = () => {
  const { nodes, materials } = useGLTF('/models/chair.gltf') as unknown as GLTFResult;
  const { legs, chairColor, cushionColor } = useConfig();

  const leatherTexture = useTexture({
    // map: '/textures/leather/Leather_Padded_002_basecolor.png',
    roughnessMap: '/textures/leather/Leather_Padded_002_roughness.png',
    metalnessMap: '/textures/leather/Leather_Padded_002_metallic.png',
    normalMap: '/textures/leather/Leather_Padded_002_normal.png',
    aoMap: '/textures/leather/Leather_Padded_002_ambientOcclusion.png',
  });

  const fabricTexture = useTexture({
    // map: '/textures/fabric/Fabric_Lace_043_basecolor.png',
    roughnessMap: '/textures/fabric/Fabric_Lace_043_roughness.png',
    alphaMap: '/textures/fabric/Fabric_Lace_043_opacity.png',
    // metalnessMap: '/textures/fabric/Fabric_Lace_043_metallic.png',
    normalMap: '/textures/fabric/Fabric_Lace_043_normal.png',
    aoMap: '/textures/fabric/Fabric_Lace_043_ambientOcclusion.png',
  });

  // leatherTexture.map.repeat.set(2, 2);
  leatherTexture.roughnessMap.repeat.set(2, 2);
  leatherTexture.metalnessMap.repeat.set(2, 2);
  leatherTexture.normalMap.repeat.set(2, 2);
  leatherTexture.aoMap.repeat.set(2, 2);

  // leatherTexture.map.wrapS =
  //   leatherTexture.map.wrapT =
  leatherTexture.roughnessMap.wrapS =
    leatherTexture.roughnessMap.wrapT =
    leatherTexture.metalnessMap.wrapS =
    leatherTexture.metalnessMap.wrapT =
    leatherTexture.normalMap.wrapS =
    leatherTexture.normalMap.wrapT =
    leatherTexture.aoMap.wrapS =
    leatherTexture.aoMap.wrapT =
      THREE.RepeatWrapping;

  // fabricTexture.map.repeat.set(2, 2);
  fabricTexture.roughnessMap.repeat.set(2, 2);
  // fabricTexture.metalnessMap.repeat.set(2, 2);
  fabricTexture.normalMap.repeat.set(2, 2);
  fabricTexture.aoMap.repeat.set(2, 2);

  // fabricTexture.map.wrapS =
  //   fabricTexture.map.wrapT =
  fabricTexture.roughnessMap.wrapS =
    fabricTexture.roughnessMap.wrapT =
    // fabricTexture.metalnessMap.wrapS =
    // fabricTexture.metalnessMap.wrapT =
    fabricTexture.normalMap.wrapS =
    fabricTexture.normalMap.wrapT =
    fabricTexture.aoMap.wrapS =
    fabricTexture.aoMap.wrapT =
      THREE.RepeatWrapping;

  return (
    <group dispose={null}>
      <mesh geometry={nodes.Chair.geometry}>
        <meshStandardMaterial {...leatherTexture} color={chairColor.color} />
      </mesh>
      <mesh
        geometry={nodes.Cushion.geometry}
        material={materials.Cushion}
        position={[0, 0.064, 0.045]}>
        <meshStandardMaterial {...fabricTexture} color={cushionColor.color} />
      </mesh>
      <mesh geometry={nodes.Legs1.geometry} material={materials.Legs} visible={legs === 0} />
      <mesh geometry={nodes.Legs2.geometry} material={materials.Legs} visible={legs === 1} />
    </group>
  );
};

useGLTF.preload('/chair.gltf');
